{"version":3,"file":"uirouter-angular.mjs","sources":["../../src/statebuilders/views.ts","../../src/mergeInjector.ts","../../src/directives/uiView.ts","../../src/directives/uiSref.ts","../../src/directives/uiSrefStatus.ts","../../src/directives/uiSrefActive.ts","../../src/directives/directives.ts","../../src/injectionTokens.ts","../../src/uiRouterConfig.ts","../../src/lazyLoad/lazyLoadNgModule.ts","../../src/statebuilders/lazyLoad.ts","../../src/location/locationService.ts","../../src/location/locationConfig.ts","../../src/providers.ts","../../src/uiRouterNgModule.ts","../../src/uirouter-angular.ts"],"sourcesContent":["import { isFunction, StateObject } from '@uirouter/core';\nimport { PathNode } from '@uirouter/core';\nimport { pick, forEach } from '@uirouter/core';\nimport { ViewConfig } from '@uirouter/core';\nimport { Ng2ViewDeclaration } from '../interface';\nimport { services } from '@uirouter/core';\nimport { ViewService } from '@uirouter/core';\n\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angular.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  const views: { [key: string]: Ng2ViewDeclaration } = {},\n    viewsObject = state.views || { $default: pick(state, ['component', 'bindings']) };\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n    if (isFunction(config)) config = { component: config as any };\n    if (Object.keys(config).length === 0) return;\n\n    config.$type = 'ng2';\n    config.$context = state;\n    config.$name = name;\n\n    const normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) {}\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n","import { Injector } from '@angular/core';\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\n  private injectors: Injector[];\n  constructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error('pass at least two injectors');\n    this.injectors = injectors;\n  }\n\n  /**\n   * Get the token from the first injector which contains it.\n   *\n   * Delegates to the first Injector.get().\n   * If not found, then delegates to the second Injector (and so forth).\n   * If no Injector contains the token, return the `notFoundValue`, or throw.\n   *\n   * @param token the DI token\n   * @param notFoundValue the value to return if none of the Injectors contains the token.\n   * @returns {any} the DI value\n   */\n  get(token: any, notFoundValue?: any): any {\n    for (let i = 0; i < this.injectors.length; i++) {\n      const val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}\n","import {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  ReflectiveInjector,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  ActiveUIView,\n  filter,\n  inArray,\n  isFunction,\n  NATIVE_INJECTOR_TOKEN,\n  Param,\n  parse,\n  PathNode,\n  ResolveContext,\n  StateDeclaration,\n  trace,\n  Transition,\n  TransitionHookFn,\n  UIRouter,\n  unnestR,\n  ViewConfig,\n  ViewContext,\n} from '@uirouter/core';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n\n/** @hidden */\nlet id = 0;\n\n/** @internal These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internal */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internal\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map((input) => ({ prop: input.propName, token: input.templateName }));\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  exportAs: 'uiView',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!_componentRef\"></ng-content>\n  `,\n})\nexport class UIView implements OnInit, OnDestroy {\n  static PARENT_INJECT = 'UIView.PARENT_INJECT';\n\n  @ViewChild('componentTarget', { read: ViewContainerRef, static: true })\n  _componentTarget: ViewContainerRef;\n  @Input('name') name: string;\n\n  @Input('ui-view')\n  set _name(val: string) {\n    this.name = val;\n  }\n\n  /** The reference to the component currently inside the viewport */\n  _componentRef: ComponentRef<any>;\n  /** Deregisters the ui-view from the view service */\n  private _deregisterUIView: Function;\n  /** Deregisters the master uiCanExit transition hook */\n  private _deregisterUiCanExitHook: Function;\n  /** Deregisters the master uiOnParamsChanged transition hook */\n  private _deregisterUiOnParamsChangedHook: Function;\n  /** Data about the this UIView */\n  private _uiViewData: ActiveUIView = <any>{};\n  private _parent: ParentUIViewInject;\n\n  constructor(\n    public router: UIRouter,\n    @Inject(UIView.PARENT_INJECT) parent,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._parent = parent;\n  }\n\n  /**\n   * @returns the UI-Router `state` that is filling this uiView, or `undefined`.\n   */\n  public get state(): StateDeclaration {\n    return parse('_uiViewData.config.viewDecl.$context.self')(this);\n  }\n\n  ngOnInit() {\n    const router = this.router;\n    const parentFqn = this._parent.fqn;\n    const name = this.name || '$default';\n\n    this._uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + '.' + name : name,\n      creationContext: this._parent.context,\n      configUpdated: this._viewConfigUpdated.bind(this),\n      config: undefined,\n    };\n\n    this._deregisterUiCanExitHook = router.transitionService.onBefore({}, (trans) => {\n      return this._invokeUiCanExitHook(trans);\n    });\n\n    this._deregisterUiOnParamsChangedHook = router.transitionService.onSuccess({}, (trans) =>\n      this._invokeUiOnParamsChangedHook(trans)\n    );\n\n    this._deregisterUIView = router.viewService.registerUIView(this._uiViewData);\n  }\n\n  /**\n   * For each transition, checks the component loaded in the ui-view for:\n   *\n   * - has a uiCanExit() component hook\n   * - is being exited\n   *\n   * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n   */\n  private _invokeUiCanExitHook(trans: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const state: StateDeclaration = this.state;\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function () {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n\n  /**\n   * For each transition, checks if any param values changed and notify component\n   */\n  private _invokeUiOnParamsChangedHook($transition$: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiOnParamsChanged: TransitionHookFn = instance && instance.uiOnParamsChanged;\n\n    if (isFunction(uiOnParamsChanged)) {\n      const viewState: StateDeclaration = this.state;\n      const resolveContext: ResolveContext = new ResolveContext(this._uiViewData.config.path);\n      const viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState as StateDeclaration) !== -1)\n        return;\n\n      const toParams: { [paramName: string]: any } = $transition$.params('to');\n      const fromParams: { [paramName: string]: any } = $transition$.params('from');\n      const getNodeSchema = (node: PathNode) => node.paramSchema;\n      const toSchema: Param[] = $transition$.treeChanges('to').map(getNodeSchema).reduce(unnestR, []);\n      const fromSchema: Param[] = $transition$.treeChanges('from').map(getNodeSchema).reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      const changedToParams = toSchema.filter((param: Param) => {\n        const idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        const changedKeys: string[] = changedToParams.map((x) => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        const newValues = filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1);\n        instance.uiOnParamsChanged(newValues, $transition$);\n      }\n    }\n  }\n\n  private _disposeLast() {\n    if (this._componentRef) this._componentRef.destroy();\n    this._componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this._deregisterUIView) this._deregisterUIView();\n    if (this._deregisterUiCanExitHook) this._deregisterUiCanExitHook();\n    if (this._deregisterUiOnParamsChangedHook) this._deregisterUiOnParamsChangedHook();\n    this._deregisterUIView = this._deregisterUiCanExitHook = this._deregisterUiOnParamsChangedHook = null;\n    this._disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  _viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this._disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this._uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this._disposeLast();\n    trace.traceUIViewConfigUpdated(this._uiViewData, config && config.viewDecl.$context);\n\n    this._applyUpdatedConfig(config);\n\n    // Initiate change detection for the newly created component\n    this._componentRef.changeDetectorRef.markForCheck();\n  }\n\n  private _applyUpdatedConfig(config: Ng2ViewConfig) {\n    this._uiViewData.config = config;\n    // Create the Injector for the routed component\n    const context = new ResolveContext(config.path);\n    const componentInjector = this._getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    const componentClass = config.viewDecl.component;\n\n    // Create the component\n    const compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    const compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this._componentRef = this._componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this._applyInputBindings(compFactory, this._componentRef.instance, context, componentClass);\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  private _getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    const resolvables = context\n      .getTokens()\n      .map((token) => context.getResolvable(token))\n      .filter((r) => r.resolved);\n\n    const newProviders = resolvables.map((r) => ({ provide: r.token, useValue: context.injector().get(r.token) }));\n\n    const parentInject = { context: this._uiViewData.config.viewDecl.$context, fqn: this._uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    const parentComponentInjector = this.viewContainerRef.injector;\n    const moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    const mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  private _applyInputBindings(factory: ComponentFactory<any>, component: any, context: ResolveContext, componentClass) {\n    const bindings = this._uiViewData.config.viewDecl['bindings'] || {};\n    const explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const renamedInputProp = (prop: string) => {\n      const input = factory.inputs.find((i) => i.templateName === prop);\n      return (input && input.propName) || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const explicitInputTuples = explicitBoundProps.reduce(\n      (acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]),\n      []\n    );\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const implicitInputTuples = ng2ComponentInputs(factory).filter((tuple) => !inArray(explicitBoundProps, tuple.prop));\n\n    const addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    const injector = context.injector();\n\n    explicitInputTuples\n      .concat(implicitInputTuples)\n      .map(addResolvable)\n      .filter((tuple) => tuple.resolvable && tuple.resolvable.resolved)\n      .forEach((tuple) => {\n        component[tuple.prop] = injector.get(tuple.resolvable.token);\n      });\n  }\n}\n","import { UIRouter, extend, Obj, TransitionOptions, TargetState, isNumber, isNullOrUndefined } from '@uirouter/core';\nimport {\n  Directive,\n  Inject,\n  Input,\n  Optional,\n  ElementRef,\n  Renderer2,\n  OnChanges,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\nimport { UIView, ParentUIViewInject } from './uiView';\nimport { ReplaySubject, Subscription } from 'rxjs';\n\n/**\n * @internal\n * # blah blah blah\n */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer2) {}\n\n  openInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n\n  update(href: string) {\n    if (!isNullOrUndefined(href)) {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  exportAs: 'uiSref',\n})\nexport class UISref implements OnChanges {\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n  @Input('uiSref') state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiParams') params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiOptions') options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internal */ private _emit = false;\n  /** @internal */ private _statesSub: Subscription;\n  /** @internal */ private _router: UIRouter;\n  /** @internal */ private _anchorUISref: AnchorUISref;\n  /** @internal */ private _parent: ParentUIViewInject;\n\n  constructor(\n    _router: UIRouter,\n    @Optional() _anchorUISref: AnchorUISref,\n    @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this._parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internal */\n  set uiSref(val: string) {\n    this.state = val;\n    this.update();\n  }\n  /** @internal */\n  set uiParams(val: Obj) {\n    this.params = val;\n    this.update();\n  }\n  /** @internal */\n  set uiOptions(val: TransitionOptions) {\n    this.options = val;\n    this.update();\n  }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  private update() {\n    const $state = this._router.stateService;\n    if (this._emit) {\n      const newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      if (!this.state) {\n        this._anchorUISref.update(null);\n      } else {\n        const href = $state.href(this.state, this.params, this.getOptions()) || '';\n        this._anchorUISref.update(href);\n      }\n    }\n  }\n\n  getOptions() {\n    const defaultOpts: TransitionOptions = {\n      relative: this._parent && this._parent.context && this._parent.context.name,\n      inherit: true,\n      source: 'sref',\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  @HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey'])\n  go(button: number, ctrlKey: boolean, metaKey: boolean) {\n    if (\n      (this._anchorUISref &&\n        (this._anchorUISref.openInNewTab() || button || !isNumber(button) || ctrlKey || metaKey)) ||\n      !this.state\n    ) {\n      return;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n","import { Directive, Output, EventEmitter, ContentChildren, QueryList, Host, Self, Optional } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode,\n  Transition,\n  TargetState,\n  StateObject,\n  anyTrueR,\n  tail,\n  unnestR,\n  Predicate,\n  UIRouterGlobals,\n  Param,\n  PathUtils,\n  identity,\n  uniqR,\n} from '@uirouter/core';\n\nimport { Subscription, Observable, BehaviorSubject, of, from, combineLatest, concat } from 'rxjs';\nimport { switchMap, map, tap } from 'rxjs/operators';\n\n/** @internal */\ninterface TransEvt {\n  evt: string;\n  trans: Transition;\n}\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n  /** The enclosed sref(s) target state(s) */\n  targetStates: TargetState[];\n}\n\n/** @internal */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n  targetStates: [],\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internal\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  const state: StateObject = target.$state();\n  const targetParamVals = target.params();\n  const targetPath: PathNode[] = PathUtils.buildPath(target);\n  const paramSchema: Param[] = targetPath\n    .map((node) => node.paramSchema)\n    .reduce(unnestR, [])\n    .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    const tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    const paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internal\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map((node) => basePath.concat(PathUtils.subPath(appendPath, (n) => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internal\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  const isStartEvent = event.evt === 'start';\n  const isSuccessEvent = event.evt === 'success';\n  const activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () => spreadToSubPaths([], activePath).map(pathMatchesTarget).reduce(anyTrueR, false);\n\n  const isExact = () => pathMatchesTarget(activePath);\n\n  const isEntering = () => spreadToSubPaths(tc.retained, tc.entering).map(pathMatchesTarget).reduce(anyTrueR, false);\n\n  const isExiting = () => spreadToSubPaths(tc.retained, tc.exiting).map(pathMatchesTarget).reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n    targetStates: [srefTarget],\n  } as SrefStatus;\n}\n\n/** @internal */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus): SrefStatus {\n  return {\n    active: left.active || right.active,\n    exact: left.exact || right.exact,\n    entering: left.entering || right.entering,\n    exiting: left.exiting || right.exiting,\n    targetStates: left.targetStates.concat(right.targetStates),\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n@Directive({\n  selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n  exportAs: 'uiSrefStatus',\n})\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n  @Output('uiSrefStatus') uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n  @ContentChildren(UISref, { descendants: true })\n  private _srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internal */ private _subscription: Subscription;\n  /** @internal */ private _srefChangesSub: Subscription;\n  /** @internal */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internal */ private _globals: UIRouterGlobals;\n  /** @internal */ private _hostUiSref: UISref;\n  constructor(@Host() @Self() @Optional() _hostUiSref: UISref, _globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this._hostUiSref = _hostUiSref;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    const transEvents$: Observable<TransEvt> = this._globals.start$.pipe(\n      switchMap((trans: Transition) => {\n        const event = (evt: string) => ({ evt, trans } as TransEvt);\n\n        const transStart$ = of(event('start'));\n        const transResult = trans.promise.then(\n          () => event('success'),\n          () => event('error')\n        );\n        const transFinish$ = from(transResult);\n\n        return concat(transStart$, transFinish$);\n      })\n    );\n\n    const withHostSref = (childrenSrefs: UISref[]) =>\n      childrenSrefs.concat(this._hostUiSref).filter(identity).reduce(uniqR, []);\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n    this._srefs$ = new BehaviorSubject(withHostSref(this._srefs.toArray()));\n    this._srefChangesSub = this._srefs.changes.subscribe((srefs: QueryList<UISref>) =>\n      this._srefs$.next(withHostSref(srefs.toArray()))\n    );\n\n    const targetStates$: Observable<TargetState[]> = this._srefs$.pipe(\n      switchMap((srefs: UISref[]) => combineLatest<TargetState[]>(srefs.map((sref) => sref.targetState$)))\n    );\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = transEvents$\n      .pipe(\n        switchMap((evt: TransEvt) => {\n          return targetStates$.pipe(\n            map((targets: TargetState[]) => {\n              const statuses: SrefStatus[] = targets.map((target) => getSrefStatus(evt, target));\n              return statuses.reduce(mergeSrefStatus);\n            })\n          );\n        })\n      )\n      .subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n}\n","import { Directive, Input, ElementRef, Host, Renderer2 } from '@angular/core';\nimport { UISrefStatus, SrefStatus } from './uiSrefStatus';\nimport { Subscription } from 'rxjs';\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]',\n})\nexport class UISrefActive {\n  private _classes: string[] = [];\n  @Input('uiSrefActive')\n  set active(val: string) {\n    this._classes = val.split(/\\s+/);\n  }\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq')\n  set activeEq(val: string) {\n    this._classesEq = val.split(/\\s+/);\n  }\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer2, @Host() host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach((cls) => {\n        if (next.active) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n      this._classesEq.forEach((cls) => {\n        if (next.exact) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n","import { UISref, AnchorUISref } from './uiSref';\nimport { UISrefActive } from './uiSrefActive';\nimport { UIView } from './uiView';\nimport { UISrefStatus } from './uiSrefStatus';\n\nexport * from './uiView';\nexport * from './uiSref';\nexport * from './uiSrefStatus';\nexport * from './uiSrefActive';\n\n/** @internal */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * @internal\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n","import { InjectionToken } from '@angular/core';\n/** @hidden */ export const UIROUTER_ROOT_MODULE = new InjectionToken('UIRouter Root Module');\n/** @hidden */ export const UIROUTER_MODULE_TOKEN = new InjectionToken('UIRouter Module');\n/** @hidden */ export const UIROUTER_STATES = new InjectionToken('UIRouter States');\n","import { UIRouter, isFunction, StateObject } from '@uirouter/core';\nimport { StatesModule, RootModule } from './uiRouterNgModule';\nimport { Injector } from '@angular/core';\nimport { isDefined } from '@uirouter/core';\n\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  const states = module.states || [];\n  return states.map((state) => uiRouter.stateRegistry.register(state));\n}\n\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise) && uiRouter.urlService.rules.otherwise(module.otherwise);\n  isDefined(module.initial) && uiRouter.urlService.rules.initial(module.initial);\n}\n","import { NgModuleRef, Injector, NgModuleFactory, Type, Compiler } from '@angular/core';\nimport {\n  Transition,\n  LazyLoadResult,\n  UIRouter,\n  Resolvable,\n  NATIVE_INJECTOR_TOKEN,\n  isString,\n  unnestR,\n  inArray,\n  StateObject,\n  uniqR,\n  StateDeclaration,\n} from '@uirouter/core';\nimport { UIROUTER_MODULE_TOKEN, UIROUTER_ROOT_MODULE } from '../injectionTokens';\nimport { RootModule, StatesModule } from '../uiRouterNgModule';\nimport { applyModuleConfig } from '../uiRouterConfig';\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n\n/**\n * Returns a function which lazy loads a nested module\n *\n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n *\n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n *\n * #### Example:\n * Using `import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n *\n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n *\n *\n * @param moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n *\n * @returns A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(\n  moduleToLoad: ModuleTypeCallback\n): (transition: Transition, stateObject: StateDeclaration) => Promise<LazyLoadResult> {\n  return (transition: Transition, stateObject: StateDeclaration) => {\n    const ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const createModule = (factory: NgModuleFactory<any>) => factory.create(ng2Injector);\n\n    const applyModule = (moduleRef: NgModuleRef<any>) => applyNgModule(transition, moduleRef, ng2Injector, stateObject);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector).then(createModule).then(applyModule);\n  };\n}\n\n/**\n * Returns the module factory that can be used to instantiate a module\n *\n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n *\n * @internal\n */\nexport function loadModuleFactory(\n  moduleToLoad: ModuleTypeCallback,\n  ng2Injector: Injector\n): Promise<NgModuleFactory<any>> {\n  const compiler: Compiler = ng2Injector.get(Compiler);\n\n  const unwrapEsModuleDefault = (x) => (x && x.__esModule && x['default'] ? x['default'] : x);\n\n  return Promise.resolve(moduleToLoad())\n    .then(unwrapEsModuleDefault)\n    .then((t: NgModuleFactory<any> | Type<any>) => {\n      if (t instanceof NgModuleFactory) {\n        return t;\n      }\n      return compiler.compileModuleAsync(t);\n    });\n}\n\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n *\n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n *\n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n *\n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n *\n * @internal\n */\nexport function applyNgModule(\n  transition: Transition,\n  ng2Module: NgModuleRef<any>,\n  parentInjector: Injector,\n  lazyLoadState: StateDeclaration\n): LazyLoadResult {\n  const injector = ng2Module.injector;\n  const uiRouter: UIRouter = injector.get(UIRouter);\n  const registry = uiRouter.stateRegistry;\n\n  const originalName = lazyLoadState.name;\n  const originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  const isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  const replacementName = isFuture && isFuture[1];\n\n  const newRootModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE).reduce(\n    uniqR,\n    []\n  ) as RootModule[];\n  const newChildModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN).reduce(\n    uniqR,\n    []\n  ) as StatesModule[];\n\n  if (newRootModules.length) {\n    console.log(newRootModules); // tslint:disable-line:no-console\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  const newStateObjects: StateObject[] = newChildModules\n    .map((module) => applyModuleConfig(uiRouter, injector, module))\n    .reduce(unnestR, [])\n    .reduce(uniqR, []);\n\n  if (isFuture) {\n    const replacementState = registry.get(replacementName);\n    if (!replacementState || replacementState === originalState) {\n      throw new Error(\n        `The Future State named '${originalName}' lazy loaded an NgModule. ` +\n          `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n          `which replaces the (placeholder) '${originalName}' Future State. ` +\n          `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n          `using UIRouterModule.forChild({ states: CHILD_STATES }).`\n      );\n    }\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  const newParentStates = newStateObjects.filter((state) => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach((state) => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n\n/**\n * Returns the new dependency injection values from the Child Injector\n *\n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n *\n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n *\n * @internal\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  const childVals: RootModule[] = child.get(token, []);\n  const parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter((val) => parentVals.indexOf(val) === -1);\n}\n","import { LazyLoadResult, Transition, StateDeclaration } from '@uirouter/core'; // has or is using\nimport { BuilderFunction, StateObject } from '@uirouter/core';\nimport { loadNgModule } from '../lazyLoad/lazyLoadNgModule';\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => import('third-party-library'),\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => import('third-party-library')\n *       .then(() => loadNgModule(() => import('./childModule.ts'))\n * }\n * ```\n *\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  const loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n","import { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true).replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    const { path, search, hash } = parseUrl(url);\n\n    const hashWithPrefix = hash ? '#' + hash : '';\n    let urlPath = path;\n    let urlParams = search;\n\n    if (search) {\n      urlParams += hashWithPrefix;\n    } else {\n      urlPath += hashWithPrefix;\n    }\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlPath, urlParams);\n    } else {\n      this._locationStrategy.pushState(state, title, urlPath, urlParams);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n","import { UIRouter, is, BrowserLocationConfig } from '@uirouter/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\n\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy));\n  }\n\n  baseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n","/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n */\nimport { Injector, Provider, PLATFORM_ID, APP_INITIALIZER } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  UIRouter,\n  PathNode,\n  StateRegistry,\n  StateService,\n  TransitionService,\n  UrlMatcherFactory,\n  UrlRouter,\n  ViewService,\n  UrlService,\n  UIRouterGlobals,\n  services,\n  Resolvable,\n  NATIVE_INJECTOR_TOKEN,\n} from '@uirouter/core';\nimport { UIView, ParentUIViewInject } from './directives/uiView';\nimport { UIROUTER_MODULE_TOKEN, UIROUTER_ROOT_MODULE } from './injectionTokens';\nimport { ng2ViewsBuilder, Ng2ViewConfig } from './statebuilders/views';\nimport { Ng2ViewDeclaration } from './interface';\nimport { applyRootModuleConfig, applyModuleConfig } from './uiRouterConfig';\nimport { RootModule, StatesModule } from './uiRouterNgModule';\nimport { servicesPlugin, ServicesPlugin } from '@uirouter/core';\nimport { ng2LazyLoadBuilder } from './statebuilders/lazyLoad';\nimport { UIRouterRx } from '@uirouter/rx';\nimport { LocationStrategy } from '@angular/common';\nimport { Ng2LocationServices } from './location/locationService';\nimport { Ng2LocationConfig } from './location/locationConfig';\n\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n */\nexport function uiRouterFactory(\n  locationStrategy: LocationStrategy,\n  rootModules: RootModule[],\n  modules: StatesModule[],\n  injector: Injector\n) {\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  const router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = new Ng2LocationServices(\n    router,\n    locationStrategy,\n    isPlatformBrowser(injector.get(PLATFORM_ID))\n  );\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  const viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory('ng2', viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  const registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  const ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach((moduleConfig) => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach((moduleConfig) => applyModuleConfig(router, injector, moduleConfig));\n\n  return router;\n}\n\n// Start monitoring the URL when the app starts\nexport function appInitializer(router: UIRouter) {\n  return () => {\n    if (!router.urlRouter.interceptDeferred) {\n      router.urlService.listen();\n      router.urlService.sync();\n    }\n  };\n}\n\nexport function parentUIViewInjectFactory(r: StateRegistry) {\n  return { fqn: null, context: r.root() } as ParentUIViewInject;\n}\n\nexport const _UIROUTER_INSTANCE_PROVIDERS: Provider[] = [\n  {\n    provide: UIRouter,\n    useFactory: uiRouterFactory,\n    deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector],\n  },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry] },\n  { provide: APP_INITIALIZER, useFactory: appInitializer, deps: [UIRouter], multi: true },\n];\n\nexport function fnStateService(r: UIRouter) {\n  return r.stateService;\n}\nexport function fnTransitionService(r: UIRouter) {\n  return r.transitionService;\n}\nexport function fnUrlMatcherFactory(r: UIRouter) {\n  return r.urlMatcherFactory;\n}\nexport function fnUrlRouter(r: UIRouter) {\n  return r.urlRouter;\n}\nexport function fnUrlService(r: UIRouter) {\n  return r.urlService;\n}\nexport function fnViewService(r: UIRouter) {\n  return r.viewService;\n}\nexport function fnStateRegistry(r: UIRouter) {\n  return r.stateRegistry;\n}\nexport function fnGlobals(r: any) {\n  return r.globals;\n}\n\nexport const _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService, useFactory: fnStateService, deps: [UIRouter] },\n  { provide: TransitionService, useFactory: fnTransitionService, deps: [UIRouter] },\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory, deps: [UIRouter] },\n  { provide: UrlRouter, useFactory: fnUrlRouter, deps: [UIRouter] },\n  { provide: UrlService, useFactory: fnUrlService, deps: [UIRouter] },\n  { provide: ViewService, useFactory: fnViewService, deps: [UIRouter] },\n  { provide: StateRegistry, useFactory: fnStateRegistry, deps: [UIRouter] },\n  { provide: UIRouterGlobals, useFactory: fnGlobals, deps: [UIRouter] },\n];\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n","import { UIROUTER_MODULE_TOKEN, UIROUTER_ROOT_MODULE } from './injectionTokens';\nimport { Ng2StateDeclaration } from './interface';\nimport {\n  NgModule,\n  ModuleWithProviders,\n  ANALYZE_FOR_ENTRY_COMPONENTS,\n  Provider,\n  Injector,\n  APP_INITIALIZER,\n} from '@angular/core';\nimport { CommonModule, LocationStrategy, HashLocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { _UIROUTER_DIRECTIVES } from './directives/directives';\nimport { UIView } from './directives/uiView';\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter, TransitionService } from '@uirouter/core';\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from './providers';\n\n// Delay angular bootstrap until first transition is successful, for SSR.\n// See https://github.com/ui-router/angular/pull/127\nexport function onTransitionReady(transitionService: TransitionService, root: RootModule[]) {\n  const mod = root[0];\n  if (!mod || !mod.deferInitialRender) {\n    return () => Promise.resolve();\n  }\n\n  return () =>\n    new Promise((resolve) => {\n      const hook = (trans) => {\n        trans.promise.then(resolve, resolve);\n      };\n      transitionService.onStart({}, hook, { invokeLimit: 1 });\n    });\n}\n\nexport function makeRootProviders(module: RootModule): Provider[] {\n  return [\n    { provide: UIROUTER_ROOT_MODULE, useValue: module, multi: true },\n    { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n    { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: onTransitionReady,\n      deps: [TransitionService, UIROUTER_ROOT_MODULE],\n      multi: true,\n    },\n  ];\n}\n\nexport function makeChildProviders(module: StatesModule): Provider[] {\n  return [\n    { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n    { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n  ];\n}\n\nexport function locationStrategy(useHash) {\n  return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n})\nexport class UIRouterModule {\n  /**\n   * Creates a UI-Router Module for the root (bootstrapped) application module to import\n   *\n   * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n   * An application should only create and import a single `NgModule` using `forRoot()`.\n   * All other modules should be created using [[UIRouterModule.forChild]].\n   *\n   * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n   * This factory also accepts root-level router configuration.\n   * These are the only differences between `forRoot` and `forChild`.\n   *\n   * Example:\n   * ```js\n   * let routerConfig = {\n   *   otherwise: '/home',\n   *   states: [homeState, aboutState]\n   * };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     BrowserModule,\n   *     UIRouterModule.forRoot(routerConfig),\n   *     FeatureModule1\n   *   ]\n   * })\n   * class MyRootAppModule {}\n   *\n   * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n   * ```\n   *\n   * @param config declarative UI-Router configuration\n   * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n   */\n  static forRoot(config: RootModule = {}): ModuleWithProviders<UIRouterModule> {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ],\n    };\n  }\n\n  /**\n   * Creates an `NgModule` for a UIRouter module\n   *\n   * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * #### Example:\n   * ```js\n   * var homeState = { name: 'home', url: '/home', component: Home };\n   * var aboutState = { name: 'about', url: '/about', component: About };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n   *     SharedModule,\n   *   ],\n   *   declarations: [ Home, About ],\n   * })\n   * export class AppModule {};\n   * ```\n   *\n   * @param module UI-Router module options\n   * @returns an `NgModule`\n   */\n  static forChild(module: StatesModule = {}): ModuleWithProviders<UIRouterModule> {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n}\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Configures the `otherwise` rule, which chooses the state or URL to activate when no other routes matched.\n   *\n   * See: [[UrlRulesApi.otherwise]].\n   */\n  otherwise?: string | UrlRuleHandlerFn | TargetState | TargetStateDef;\n\n  /**\n   * Configures the `initial` rule, which chooses the state or URL to activate when the\n   * application initially starts, and no other routes matched.\n   *\n   * See: [[UrlRulesApi.initial]].\n   */\n  initial?: string | UrlRuleHandlerFn | TargetState | TargetStateDef;\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n\n  /**\n   * Tells Angular to defer the first render until after the initial transition is complete.\n   *\n   * When `true`, adds an async `APP_INITIALIZER` which is resolved after any `onSuccess` or `onError`.\n   * The initializer stops angular from rendering the root component until after the first transition completes.\n   * This may prevent initial page flicker while the state is being loaded.\n   *\n   * Defaults to `false`\n   */\n  deferInitialRender?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["id"],"mappings":";;;;;;;;;;;AAQA;;;;;;;;;SASgB,eAAe,CAAC,KAAkB;IAChD,MAAM,KAAK,GAA0C,EAAE,EACrD,WAAW,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC;IAEpF,OAAO,CAAC,WAAW,EAAE,UAAU,MAA0B,EAAE,IAAY;QACrE,IAAI,GAAG,IAAI,IAAI,UAAU,CAAC;QAC1B,IAAI,UAAU,CAAC,MAAM,CAAC;YAAE,MAAM,GAAG,EAAE,SAAS,EAAE,MAAa,EAAE,CAAC;QAC9D,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAE7C,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QAEpB,MAAM,UAAU,GAAG,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACpF,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC;QAC3C,MAAM,CAAC,oBAAoB,GAAG,UAAU,CAAC,mBAAmB,CAAC;QAE7D,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;KACtB,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,IAAIA,IAAE,GAAG,CAAC,CAAC;MACE,aAAa;IAIxB,YAAmB,IAAgB,EAAS,QAA4B;QAArD,SAAI,GAAJ,IAAI,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAoB;QAHxE,QAAG,GAAWA,IAAE,EAAE,CAAC;QACnB,WAAM,GAAG,IAAI,CAAC;KAE8D;IAE5E,IAAI;QACF,OAAO,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/B;;;AC9CH;;;;;;MAMa,aAAa;IAGxB,YAAY,GAAG,SAAqB;QAClC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACzE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;;;;;;;;;;;;IAaD,GAAG,CAAC,KAAU,EAAE,aAAmB;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;YAClE,IAAI,GAAG,KAAK,aAAa,CAAC,SAAS;gBAAE,OAAO,GAAG,CAAC;SACjD;QAED,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,aAAa,CAAC;;QAGhD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;;AA5BM,uBAAS,GAAG,EAAE;;AC4BvB;AACA,IAAI,EAAE,GAAG,CAAC,CAAC;AAcX;;;;;;;;AAQA,MAAM,kBAAkB,GAAG,CAAC,OAA8B;IACxD,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;AAC9F,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsDa,MAAM;IAwBjB,YACS,MAAgB,EACO,MAAM,EAC7B,gBAAkC;QAFlC,WAAM,GAAN,MAAM,CAAU;QAEhB,qBAAgB,GAAhB,gBAAgB,CAAkB;;QANnC,gBAAW,GAAsB,EAAE,CAAC;QAQ1C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACvB;IAvBD,IACI,KAAK,CAAC,GAAW;QACnB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;KACjB;;;;IAyBD,IAAW,KAAK;QACd,OAAO,KAAK,CAAC,2CAA2C,CAAC,CAAC,IAAI,CAAC,CAAC;KACjE;IAED,QAAQ;QACN,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC;QAErC,IAAI,CAAC,WAAW,GAAG;YACjB,KAAK,EAAE,KAAK;YACZ,EAAE,EAAE,EAAE,EAAE;YACR,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,SAAS,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI;YAC9C,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YACrC,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;YACjD,MAAM,EAAE,SAAS;SAClB,CAAC;QAEF,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,KAAK;YAC1E,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACzC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,GAAG,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,KAAK,KACnF,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CACzC,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC9E;;;;;;;;;IAUO,oBAAoB,CAAC,KAAiB;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QACnE,MAAM,WAAW,GAAqB,QAAQ,IAAI,QAAQ,CAAC,SAAS,CAAC;QAErE,IAAI,UAAU,CAAC,WAAW,CAAC,EAAE;YAC3B,MAAM,KAAK,GAAqB,IAAI,CAAC,KAAK,CAAC;YAE3C,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE;oBAChB,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;iBAC1C,CAAC,CAAC;aACJ;SACF;KACF;;;;IAKO,4BAA4B,CAAC,YAAwB;QAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QACnE,MAAM,iBAAiB,GAAqB,QAAQ,IAAI,QAAQ,CAAC,iBAAiB,CAAC;QAEnF,IAAI,UAAU,CAAC,iBAAiB,CAAC,EAAE;YACjC,MAAM,SAAS,GAAqB,IAAI,CAAC,KAAK,CAAC;YAC/C,MAAM,cAAc,GAAmB,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxF,MAAM,iBAAiB,GAAG,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;;;YAI5E,IAAI,YAAY,KAAK,iBAAiB,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,SAA6B,CAAC,KAAK,CAAC,CAAC;gBAC5G,OAAO;YAET,MAAM,QAAQ,GAAiC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzE,MAAM,UAAU,GAAiC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7E,MAAM,aAAa,GAAG,CAAC,IAAc,KAAK,IAAI,CAAC,WAAW,CAAC;YAC3D,MAAM,QAAQ,GAAY,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAChG,MAAM,UAAU,GAAY,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;YAGpG,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAY;gBACnD,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACtC,OAAO,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;aAC7F,CAAC,CAAC;;YAGH,IAAI,eAAe,CAAC,MAAM,EAAE;gBAC1B,MAAM,WAAW,GAAa,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;gBAE/D,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClF,QAAQ,CAAC,iBAAiB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;aACrD;SACF;KACF;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,aAAa;YAAE,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QACrD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;KAC3B;IAED,WAAW;QACT,IAAI,IAAI,CAAC,iBAAiB;YAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,wBAAwB;YAAE,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACnE,IAAI,IAAI,CAAC,gCAAgC;YAAE,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC;QACtG,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAMD,kBAAkB,CAAC,MAAkB;;;QAGnC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;;QAGxC,IAAI,EAAE,MAAM,YAAY,aAAa,CAAC;YAAE,OAAO;;QAG/C,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,MAAM;YAAE,OAAO;;QAG/C,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,KAAK,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAErF,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;;QAGjC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACrD;IAEO,mBAAmB,CAAC,MAAqB;QAC/C,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;;QAEjC,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;;QAG9D,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;;QAGjD,MAAM,mBAAmB,GAAG,iBAAiB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAC5E,MAAM,WAAW,GAAG,mBAAmB,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,WAAW,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;;QAGtG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;KAC7F;;;;;;;;;;;IAYO,qBAAqB,CAAC,OAAuB;;QAEnD,MAAM,WAAW,GAAG,OAAO;aACxB,SAAS,EAAE;aACX,GAAG,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC5C,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE7B,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAE/G,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;QACvG,YAAY,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,aAAa,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC;QAE7E,MAAM,uBAAuB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QAC/D,MAAM,cAAc,GAAG,OAAO,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC;QACzE,MAAM,oBAAoB,GAAG,IAAI,aAAa,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;QAExF,OAAO,kBAAkB,CAAC,gBAAgB,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;KAChF;;;;;;;IAQO,mBAAmB,CAAC,OAA8B,EAAE,SAAc,EAAE,OAAuB,EAAE,cAAc;QACjH,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACpE,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;QAIjD,MAAM,gBAAgB,GAAG,CAAC,IAAY;YACpC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC;YAClE,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC;SAC1C,CAAC;;QAGF,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,MAAM,CACnD,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EACjF,EAAE,CACH,CAAC;;QAGF,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpH,MAAM,aAAa,GAAG,CAAC,KAAmB,MAAM;YAC9C,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC;SAC/C,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QAEpC,mBAAmB;aAChB,MAAM,CAAC,mBAAmB,CAAC;aAC3B,GAAG,CAAC,aAAa,CAAC;aAClB,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC;aAChE,OAAO,CAAC,CAAC,KAAK;YACb,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAC9D,CAAC,CAAC;KACN;;AA3PM,oBAAa,GAAG,sBAAsB,CAAC;mGADnC,MAAM,0CA0BP,MAAM,CAAC,aAAa;uFA1BnB,MAAM,iNAGqB,gBAAgB,iEAR5C;;;GAGT;2FAEU,MAAM;kBARlB,SAAS;mBAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE;;;GAGT;iBACF;;0BA2BI,MAAM;2BAAC,MAAM,CAAC,aAAa;2EAtB9B,gBAAgB;sBADf,SAAS;uBAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,MAAM,EAAE,IAAI,EAAE;gBAEvD,IAAI;sBAAlB,KAAK;uBAAC,MAAM;gBAGT,KAAK;sBADR,KAAK;uBAAC,SAAS;;;AC9GlB;;;;MAKa,YAAY;IACvB,YAAmB,GAAe,EAAS,SAAoB;QAA5C,QAAG,GAAH,GAAG,CAAY;QAAS,cAAS,GAAT,SAAS,CAAW;KAAI;IAEnE,YAAY;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,KAAK,QAAQ,CAAC;KACnD;IAED,MAAM,CAAC,IAAY;QACjB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAClE;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SAChE;KACF;;yGAbU,YAAY;6FAAZ,YAAY;2FAAZ,YAAY;kBADxB,SAAS;mBAAC,EAAE,QAAQ,EAAE,WAAW,EAAE;;AAiBpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6Ca,MAAM;IAwCjB,YACE,OAAiB,EACL,aAA2B,EACT,MAA0B;;;;;QAXnD,iBAAY,GAAG,IAAI,aAAa,CAAc,CAAC,CAAC,CAAC;yBAE/B,UAAK,GAAG,KAAK,CAAC;QAWrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KAC1E;;IAGD,IAAI,MAAM,CAAC,GAAW;QACpB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;;IAED,IAAI,QAAQ,CAAC,GAAQ;QACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;;IAED,IAAI,SAAS,CAAC,GAAsB;QAClC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,WAAW;QACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;IAEO,MAAM;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QACzC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YAC5E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACnC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACjC;iBAAM;gBACL,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC3E,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACjC;SACF;KACF;IAED,UAAU;QACR,MAAM,WAAW,GAAsB;YACrC,QAAQ,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;YAC3E,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,MAAM;SACf,CAAC;QACF,OAAO,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;KAChD;;IAID,EAAE,CAAC,MAAc,EAAE,OAAgB,EAAE,OAAgB;QACnD,IACE,CAAC,IAAI,CAAC,aAAa;aAChB,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC;YAC1F,CAAC,IAAI,CAAC,KAAK,EACX;YACA,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACzE,OAAO,KAAK,CAAC;KACd;;mGA1HU,MAAM,0CA0CY,YAAY,6BAC/B,MAAM,CAAC,aAAa;uFA3CnB,MAAM;2FAAN,MAAM;kBAJlB,SAAS;mBAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,QAAQ;iBACnB;iFA2C8B,YAAY;0BAAtC,QAAQ;;0BACR,MAAM;2BAAC,MAAM,CAAC,aAAa;4CAnCb,KAAK;sBAArB,KAAK;uBAAC,QAAQ;gBASI,MAAM;sBAAxB,KAAK;uBAAC,UAAU;gBASG,OAAO;sBAA1B,KAAK;uBAAC,WAAW;gBAqFlB,EAAE;sBADD,YAAY;uBAAC,OAAO,EAAE,CAAC,eAAe,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;;;ACpJ9E;AACA,MAAM,cAAc,GAAe;IACjC,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,KAAK;IACZ,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,EAAE;CACjB,CAAC;AAEF;;;;;;;;AAQA,MAAM,WAAW,GAAG,CAAC,MAAmB;IACtC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAAE,OAAO,MAAM,KAAK,CAAC;IACzC,MAAM,KAAK,GAAgB,MAAM,CAAC,MAAM,EAAE,CAAC;IAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;IACxC,MAAM,UAAU,GAAe,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,WAAW,GAAY,UAAU;SACpC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC;SAC/B,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;SACnB,MAAM,CAAC,CAAC,KAAY,KAAK,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAEtE,OAAO,CAAC,IAAgB;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,KAAK,KAAK;YAAE,OAAO,KAAK,CAAC;QACxD,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;KAChE,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;AAOA,SAAS,gBAAgB,CAAC,QAAoB,EAAE,UAAsB;IACpE,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACjH,CAAC;AAED;;;;;;;;AAQA,SAAS,aAAa,CAAC,KAAe,EAAE,UAAuB;IAC7D,MAAM,iBAAiB,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IAClD,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IAErC,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,KAAK,OAAO,CAAC;IAC3C,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,KAAK,SAAS,CAAC;IAC/C,MAAM,UAAU,GAAe,cAAc,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEvG,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAEpD,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEnH,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEjH,OAAO;QACL,MAAM,EAAE,QAAQ,EAAE;QAClB,KAAK,EAAE,OAAO,EAAE;QAChB,QAAQ,EAAE,YAAY,GAAG,UAAU,EAAE,GAAG,KAAK;QAC7C,OAAO,EAAE,YAAY,GAAG,SAAS,EAAE,GAAG,KAAK;QAC3C,YAAY,EAAE,CAAC,UAAU,CAAC;KACb,CAAC;AAClB,CAAC;AAED;AACA,SAAS,eAAe,CAAC,IAAgB,EAAE,KAAiB;IAC1D,OAAO;QACL,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM;QACnC,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;QAChC,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ;QACzC,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO;QACtC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC;KAC3D,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoDa,YAAY;IAevB,YAAwC,WAAmB,EAAE,QAAyB;;QAb9D,iBAAY,GAAG,IAAI,YAAY,CAAa,KAAK,CAAC,CAAC;QAczE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KACjD;IAED,kBAAkB;;;QAGhB,MAAM,YAAY,GAAyB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAClE,SAAS,CAAC,CAAC,KAAiB;YAC1B,MAAM,KAAK,GAAG,CAAC,GAAW,MAAM,EAAE,GAAG,EAAE,KAAK,EAAe,CAAA,CAAC;YAE5D,MAAM,WAAW,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvC,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CACpC,MAAM,KAAK,CAAC,SAAS,CAAC,EACtB,MAAM,KAAK,CAAC,OAAO,CAAC,CACrB,CAAC;YACF,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;YAEvC,OAAO,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;SAC1C,CAAC,CACH,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,aAAuB,KAC3C,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;;QAG5E,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,KAAwB,KAC5E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CACjD,CAAC;QAEF,MAAM,aAAa,GAA8B,IAAI,CAAC,OAAO,CAAC,IAAI,CAChE,SAAS,CAAC,CAAC,KAAe,KAAK,aAAa,CAAgB,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CACrG,CAAC;;;QAIF,IAAI,CAAC,aAAa,GAAG,YAAY;aAC9B,IAAI,CACH,SAAS,CAAC,CAAC,GAAa;YACtB,OAAO,aAAa,CAAC,IAAI,CACvB,GAAG,CAAC,CAAC,OAAsB;gBACzB,MAAM,QAAQ,GAAiB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;gBACnF,OAAO,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;aACzC,CAAC,CACH,CAAC;SACH,CAAC,CACH;aACA,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC1C;IAED,WAAW;QACT,IAAI,IAAI,CAAC,aAAa;YAAE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACzD,IAAI,IAAI,CAAC,eAAe;YAAE,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAC7D,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;KACtE;IAEO,UAAU,CAAC,MAAkB;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAChC;;yGA9EU,YAAY;6FAAZ,YAAY,wJAIN,MAAM;2FAJZ,YAAY;kBAJxB,SAAS;mBAAC;oBACT,QAAQ,EAAE,gDAAgD;oBAC1D,QAAQ,EAAE,cAAc;iBACzB;;0BAgBc,IAAI;;0BAAI,IAAI;;0BAAI,QAAQ;0EAbb,YAAY;sBAAnC,MAAM;uBAAC,cAAc;gBAGd,MAAM;sBADb,eAAe;uBAAC,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;;;ACzLhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiFa,YAAY;IAcvB,YAAY,YAA0B,EAAE,GAAc,EAAU,IAAgB;QAbxE,aAAQ,GAAa,EAAE,CAAC;QAMxB,eAAU,GAAa,EAAE,CAAC;QAQhC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAgB;YACxE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG;gBACxB,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBACvC;qBAAM;oBACL,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBAC1C;aACF,CAAC,CAAC;YACH,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG;gBAC1B,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBACvC;qBAAM;oBACL,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBAC1C;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IA7BD,IACI,MAAM,CAAC,GAAW;QACpB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAClC;IAGD,IACI,QAAQ,CAAC,GAAW;QACtB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACpC;IAsBD,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;;yGAnCU,YAAY;6FAAZ,YAAY;2FAAZ,YAAY;kBAHxB,SAAS;mBAAC;oBACT,QAAQ,EAAE,iCAAiC;iBAC5C;;0BAe0D,IAAI;4CAXzD,MAAM;sBADT,KAAK;uBAAC,cAAc;gBAOjB,QAAQ;sBADX,KAAK;uBAAC,gBAAgB;;;ACnFzB;MACa,oBAAoB,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE;AAE/F;;;;;MAKa,mBAAmB,GAAG;;ACjBnC,qBAA4B,oBAAoB,GAAG,IAAI,cAAc,CAAC,sBAAsB,EAAE;AAC9F,qBAA4B,qBAAqB,GAAG,IAAI,cAAc,CAAC,iBAAiB,EAAE;AAC1F,qBAA4B,eAAe,GAAG,IAAI,cAAc,CAAC,iBAAiB;;SCElE,iBAAiB,CAAC,QAAkB,EAAE,QAAkB,EAAE,SAAuB,EAAE;IACjG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;QAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KAC3C;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACnC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AACvE,CAAC;SAEe,qBAAqB,CAAC,QAAkB,EAAE,QAAkB,EAAE,MAAkB;IAC9F,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9F,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACrF,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjF;;ACYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAuCgB,YAAY,CAC1B,YAAgC;IAEhC,OAAO,CAAC,UAAsB,EAAE,WAA6B;QAC3D,MAAM,WAAW,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAErE,MAAM,YAAY,GAAG,CAAC,OAA6B,KAAK,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEpF,MAAM,WAAW,GAAG,CAAC,SAA2B,KAAK,aAAa,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QAEpH,OAAO,iBAAiB,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1F,CAAC;AACJ,CAAC;AAED;;;;;;;;;SASgB,iBAAiB,CAC/B,YAAgC,EAChC,WAAqB;IAErB,MAAM,QAAQ,GAAa,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAErD,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAE5F,OAAO,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;SACnC,IAAI,CAAC,qBAAqB,CAAC;SAC3B,IAAI,CAAC,CAAC,CAAmC;QACxC,IAAI,CAAC,YAAY,eAAe,EAAE;YAChC,OAAO,CAAC,CAAC;SACV;QACD,OAAO,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;KACvC,CAAC,CAAC;AACP,CAAC;AAED;;;;;;;;;;;;;;SAcgB,aAAa,CAC3B,UAAsB,EACtB,SAA2B,EAC3B,cAAwB,EACxB,aAA+B;IAE/B,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;IACpC,MAAM,QAAQ,GAAa,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;IAExC,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC;IACxC,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;;IAEjD,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;IAEnD,MAAM,eAAe,GAAG,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEhD,MAAM,cAAc,GAAG,6BAA6B,CAAC,cAAc,EAAE,QAAQ,EAAE,oBAAoB,CAAC,CAAC,MAAM,CACzG,KAAK,EACL,EAAE,CACa,CAAC;IAClB,MAAM,eAAe,GAAG,6BAA6B,CAAC,cAAc,EAAE,QAAQ,EAAE,qBAAqB,CAAC,CAAC,MAAM,CAC3G,KAAK,EACL,EAAE,CACe,CAAC;IAEpB,IAAI,cAAc,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;KAC7F;IAED,MAAM,eAAe,GAAkB,eAAe;SACnD,GAAG,CAAC,CAAC,MAAM,KAAK,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC9D,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;SACnB,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAErB,IAAI,QAAQ,EAAE;QACZ,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,KAAK,aAAa,EAAE;YAC3D,MAAM,IAAI,KAAK,CACb,2BAA2B,YAAY,6BAA6B;gBAClE,qDAAqD,eAAe,IAAI;gBACxE,qCAAqC,YAAY,kBAAkB;gBACnE,UAAU,eAAe,sCAAsC;gBAC/D,0DAA0D,CAC7D,CAAC;SACH;KACF;;;;IAKD,MAAM,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;;IAGnG,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEjH,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;;;;;;;;;SAUgB,6BAA6B,CAAC,MAAgB,EAAE,KAAe,EAAE,KAAU;IACzF,MAAM,SAAS,GAAiB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACrD,MAAM,UAAU,GAAiB,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACvD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnE;;AClMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA2CgB,kBAAkB,CAAC,KAAkB,EAAE,MAAuB;IAC5E,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;IAC7C,OAAO,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;AACxE;;AC/CA;MACa,mBAAoB,SAAQ,oBAAoB;IAC3D,YAAY,MAAgB,EAAU,iBAAmC,EAAE,SAAkB;QAC3F,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QADW,sBAAiB,GAAjB,iBAAiB,CAAkB;QAGvE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,GAAG;YACpC,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE;gBAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACrB;SACF,CAAC,CAAC;KACJ;IAED,IAAI;QACF,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;KAC/G;IAED,IAAI,CAAC,KAAU,EAAE,KAAa,EAAE,GAAW,EAAE,OAAgB;QAC3D,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE7C,MAAM,cAAc,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QAC9C,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,SAAS,GAAG,MAAM,CAAC;QAEvB,IAAI,MAAM,EAAE;YACV,SAAS,IAAI,cAAc,CAAC;SAC7B;aAAM;YACL,OAAO,IAAI,cAAc,CAAC;SAC3B;QAED,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;SACvE;aAAM;YACL,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;SACpE;KACF;IAED,OAAO,CAAC,MAAgB;QACtB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACvB;;;MCtCU,iBAAkB,SAAQ,qBAAqB;IAC1D,YAAY,MAAgB,EAAU,iBAAmC;QACvE,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAoB,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QADvB,sBAAiB,GAAjB,iBAAiB,CAAkB;KAExE;IAED,QAAQ,CAAC,IAAa;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;KAC7C;;;ACVH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;;;;;;SAMgB,eAAe,CAC7B,gBAAkC,EAClC,WAAyB,EACzB,OAAuB,EACvB,QAAkB;IAElB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,6FAA6F,CAAC,CAAC;KAChH;;;IAID,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;;IAG9B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;IAG1B,MAAM,CAAC,MAAM,CAAiB,cAAc,CAAC,CAAC;;;IAI9C,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;IAGrD,MAAM,CAAC,eAAe,GAAG,IAAI,mBAAmB,CAC9C,MAAM,EACN,gBAAgB,EAChB,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAC7C,CAAC;IACF,MAAM,CAAC,cAAc,GAAG,IAAI,iBAAiB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;;IAGxE,MAAM,iBAAiB,GAAG,CAAC,IAAgB,EAAE,MAA0B,KAAK,IAAI,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC5G,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;;IAG3E,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC;IACtC,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC7C,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;;IAGnD,MAAM,qBAAqB,GAAG,UAAU,CAAC,QAAQ,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;IACnF,QAAQ,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;;IAGxD,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;;IAGhC,WAAW,CAAC,OAAO,CAAC,CAAC,YAAY,KAAK,qBAAqB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;IAC7F,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,KAAK,iBAAiB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;IAErF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;SACgB,cAAc,CAAC,MAAgB;IAC7C,OAAO;QACL,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE;YACvC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC3B,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SAC1B;KACF,CAAC;AACJ,CAAC;SAEe,yBAAyB,CAAC,CAAgB;IACxD,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,EAAwB,CAAC;AAChE,CAAC;MAEY,4BAA4B,GAAe;IACtD;QACE,OAAO,EAAE,QAAQ;QACjB,UAAU,EAAE,eAAe;QAC3B,IAAI,EAAE,CAAC,gBAAgB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,QAAQ,CAAC;KAChF;IACD,EAAE,OAAO,EAAE,MAAM,CAAC,aAAa,EAAE,UAAU,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE;IAC/F,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;EACvF;SAEc,cAAc,CAAC,CAAW;IACxC,OAAO,CAAC,CAAC,YAAY,CAAC;AACxB,CAAC;SACe,mBAAmB,CAAC,CAAW;IAC7C,OAAO,CAAC,CAAC,iBAAiB,CAAC;AAC7B,CAAC;SACe,mBAAmB,CAAC,CAAW;IAC7C,OAAO,CAAC,CAAC,iBAAiB,CAAC;AAC7B,CAAC;SACe,WAAW,CAAC,CAAW;IACrC,OAAO,CAAC,CAAC,SAAS,CAAC;AACrB,CAAC;SACe,YAAY,CAAC,CAAW;IACtC,OAAO,CAAC,CAAC,UAAU,CAAC;AACtB,CAAC;SACe,aAAa,CAAC,CAAW;IACvC,OAAO,CAAC,CAAC,WAAW,CAAC;AACvB,CAAC;SACe,eAAe,CAAC,CAAW;IACzC,OAAO,CAAC,CAAC,aAAa,CAAC;AACzB,CAAC;SACe,SAAS,CAAC,CAAM;IAC9B,OAAO,CAAC,CAAC,OAAO,CAAC;AACnB,CAAC;MAEY,2BAA2B,GAAe;IACrD,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACvE,EAAE,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACjF,EAAE,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACjF,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACjE,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACnE,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACrE,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;IACzE,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;EACrE;AAEF;;;;;MAKa,kBAAkB,GAAe,4BAA4B,CAAC,MAAM,CAAC,2BAA2B;;AChO7G;AACA;SACgB,iBAAiB,CAAC,iBAAoC,EAAE,IAAkB;IACxF,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE;QACnC,OAAO,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;KAChC;IAED,OAAO,MACL,IAAI,OAAO,CAAC,CAAC,OAAO;QAClB,MAAM,IAAI,GAAG,CAAC,KAAK;YACjB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACtC,CAAC;QACF,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;KACzD,CAAC,CAAC;AACP,CAAC;SAEe,iBAAiB,CAAC,MAAkB;IAClD,OAAO;QACL,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;QAChE,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;QACjE,EAAE,OAAO,EAAE,4BAA4B,EAAE,QAAQ,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;QACrF;YACE,OAAO,EAAE,eAAe;YACxB,UAAU,EAAE,iBAAiB;YAC7B,IAAI,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,CAAC;YAC/C,KAAK,EAAE,IAAI;SACZ;KACF,CAAC;AACJ,CAAC;SAEe,kBAAkB,CAAC,MAAoB;IACrD,OAAO;QACL,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;QACjE,EAAE,OAAO,EAAE,4BAA4B,EAAE,QAAQ,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;KACtF,CAAC;AACJ,CAAC;SAEe,gBAAgB,CAAC,OAAO;IACtC,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,OAAO,GAAG,oBAAoB,GAAG,oBAAoB,EAAE,CAAC;AACxG,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;MA2Ba,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCzB,OAAO,OAAO,CAAC,SAAqB,EAAE;QACpC,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;gBACT,4BAA4B;gBAC5B,2BAA2B;gBAC3B,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC;gBAChC,GAAG,iBAAiB,CAAC,MAAM,CAAC;aAC7B;SACF,CAAC;KACH;;;;;;;;;;;;;;;;;;;;;;;;;IA0BD,OAAO,QAAQ,CAAC,SAAuB,EAAE;QACvC,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,kBAAkB,CAAC,MAAM,CAAC;SACtC,CAAC;KACH;;2GA9EU,cAAc;4GAAd,cAAc,sFALf,YAAY;4GAKX,cAAc,YALhB,CAAC,YAAY,CAAC;2FAKZ,cAAc;kBAN1B,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,YAAY,EAAE,CAAC,oBAAoB,CAAC;oBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;oBAC/B,eAAe,EAAE,CAAC,MAAM,CAAC;iBAC1B;;;ACpFD;;;;;;"}